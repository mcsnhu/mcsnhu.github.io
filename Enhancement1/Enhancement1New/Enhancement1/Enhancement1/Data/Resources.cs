using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Enhancement1.Core;
using Enhancement1.Graphics;
using MoonWorks.Graphics;

namespace Enhancement1.Data;
public class Resources
{
    // Utility textures for testing purposes
    public readonly TextureID PrototypingDark9Texture;
    public readonly TextureID PrototypingLight8Texture;

    // Diffuse textures used by meshes
    public readonly TextureID FlowerPotDiffuseTexture;
    public readonly TextureID FluffyRugDiffuseTexture;
    public readonly TextureID SofaDiffuseTexture;
    public readonly TextureID TableDiffuseTexture;
    public readonly TextureID TableRoundDiffuseTexture;
    public readonly TextureID CarpetDiffuseTexture;
    public readonly TextureID DarkWoodenFloorDiffuseTexture;
    public readonly TextureID PlasterWallDiffuseTexture;
    public readonly TextureID PaintingDiffuseTexture;
    public readonly TextureID CupDiffuseTexture;

    // Shaders used to compose the main pipeline
    public readonly ShaderID MeshVertexShader;
    public readonly ShaderID MeshFragmentShader;

    // The graphics pipeline asset
    public readonly GraphicsPipelineID DefaultMeshPipeline;

    // Texture samplers
    public readonly SamplerID PointWrapSampler;
    public readonly SamplerID LinearWrapSampler;

    // 3D assets
    public readonly ModelID CubeModel;
    public readonly ModelID PlaneModel;
    public readonly ModelID FlowerPotModel;
    public readonly ModelID FluffyRugModel;
    public readonly ModelID SofaModel;
    public readonly ModelID TableModel;
    public readonly ModelID TableRoundModel;
    public readonly ModelID CarpetModel;
    public readonly ModelID WallModel;
    public readonly ModelID PaintingModel;
    public readonly ModelID CupModel;

    public Resources(Engine Engine)
    {
        // Register all the assets. This effectively obtains a unique handle for later use in the application.
        // Usually this file would be generated by a specialized content tool.

        PrototypingDark9Texture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("prototyping_dark_9.png")));
        PrototypingLight8Texture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("prototyping_light_8.png")));

        // SDL3 storage abstraction requires the use of forward slash for all platforms;
        FlowerPotDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("FlowerPot/T_FlowerPot_Diffuse.png")));
        FluffyRugDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("FluffyRug/T_FluffyRug_Diffuse.png")));
        SofaDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("Sofa/T_Sofa_Diffuse.png")));
        TableDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("Table/T_Table_Diffuse.png")));
        TableRoundDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("TableRound/T_TableRound_Diffuse.png")));
        CarpetDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("Carpet/T_Carpet_Diffuse.png")));
        DarkWoodenFloorDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("DarkWoodenFloor/T_DarkWoodenFloor_Diffuse.png")));
        PlasterWallDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("PlasterWall/T_PlasterWall_Diffuse.png")));
        PaintingDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("Painting/T_Painting_Diffuse.png")));
        CupDiffuseTexture = Engine.AssetDatabase.RegisterTexture(new TextureMetadata(GetTexturePath("Cup/T_Cup_Diffuse.png")));

        MeshVertexShader = Engine.AssetDatabase.RegisterShader(new ShaderMetadata(GetShaderPathHLSL("mesh-vertex.vert"), "main", ShaderStage.Vertex));
        MeshFragmentShader = Engine.AssetDatabase.RegisterShader(new ShaderMetadata(GetShaderPathHLSL("mesh-fragment.frag"), "main", ShaderStage.Fragment));

        // Modern graphics APIs like Vulkan/DirectX12 have stricter state change rules
        // All pipelines are defined in advance so that the graphics card doesn't suffer from frequent and unpredictable state changes
        DefaultMeshPipeline = Engine.AssetDatabase.RegisterPipeline(new GraphicsPipelineMetadata()
        {
            Name = "DefaultMeshPipeline",
            VertexShaderID = MeshVertexShader,
            FragmentShaderID = MeshFragmentShader,
            GraphicsPipelineCreateInfo = new GraphicsPipelineCreateInfo()
            {
                TargetInfo = new GraphicsPipelineTargetInfo
                {
                    ColorTargetDescriptions = [
                    new ColorTargetDescription
                    {
                        Format = Engine.MainWindow.SwapchainFormat,
                        BlendState = ColorTargetBlendState.Opaque
                    }],
                    DepthStencilFormat = Engine.GraphicsDevice.SupportedDepthFormat,
                    HasDepthStencilTarget = true,
                },
                DepthStencilState = new DepthStencilState()
                {
                    EnableDepthTest = true,
                    EnableDepthWrite = true,
                    CompareOp = CompareOp.LessOrEqual
                },
                MultisampleState = MultisampleState.None,
                PrimitiveType = PrimitiveType.TriangleList,
                RasterizerState = RasterizerState.CCW_CullBack,
                VertexInputState = VertexInputState.CreateSingleBinding<PositionTextureNormalVertex>(),
            }
        });

        PointWrapSampler = Engine.AssetDatabase.RegisterSampler(new SamplerMetadata("PointWrap", SamplerCreateInfo.PointWrap));
        LinearWrapSampler = Engine.AssetDatabase.RegisterSampler(new SamplerMetadata("LinearWrap", SamplerCreateInfo.LinearWrap));

        CubeModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Cube", GetModelPath("cube2.obj")));
        PlaneModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Plane", GetModelPath("Plane.obj")));
        FlowerPotModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("FlowerPot", GetModelPath("FlowerPot.obj")));
        FluffyRugModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("FluffyRug", GetModelPath("FluffyRug.obj")));
        SofaModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Sofa", GetModelPath("Sofa.obj")));
        TableModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Table", GetModelPath("Table.obj")));
        TableRoundModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("TableRound", GetModelPath("TableRound.obj")));
        CarpetModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Carpet", GetModelPath("Carpet.obj")));
        WallModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Wall", GetModelPath("Wall.obj")));
        PaintingModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Painting", GetModelPath("Painting.obj")));
        CupModel = Engine.AssetDatabase.RegisterModel(new ModelMetadata("Cup", GetModelPath("Cup.obj")));
    }

    private string GetTexturePath(string filename) => "Data/Textures/" + filename;
    private string GetShaderPathHLSL(string filename) => "Data/Shaders/" + filename + ".hlsl";
    private string GetModelPath(string filename) => "Data/Models/" + filename;
}
